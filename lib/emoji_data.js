// Generated by CoffeeScript 1.12.7
var EmojiChar, EmojiData, _str, punycode;

EmojiChar = require('./emoji_char');

punycode = require('punycode');

_str = require('underscore.string');

EmojiData = (function() {
  var EMOJICHAR_KEYWORD_MAP, EMOJICHAR_UNIFIED_MAP, EMOJI_CHARS, EMOJI_MAP, FBS_REGEXP, char_blob, ec, i, j, k, keyword, l, len, len1, len2, len3, ref, ref1, variant;

  function EmojiData() {}

  EMOJI_MAP = require('../vendor/emoji-data/emoji.json');

  EMOJI_CHARS = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = EMOJI_MAP.length; i < len; i++) {
      char_blob = EMOJI_MAP[i];
      results.push(new EmojiChar(char_blob));
    }
    return results;
  })();

  EMOJICHAR_UNIFIED_MAP = {};

  for (i = 0, len = EMOJI_CHARS.length; i < len; i++) {
    ec = EMOJI_CHARS[i];
    EMOJICHAR_UNIFIED_MAP[ec.unified] = ec;
    ref = ec.variations;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      variant = ref[j];
      EMOJICHAR_UNIFIED_MAP[variant] = ec;
    }
  }

  EMOJICHAR_KEYWORD_MAP = {};

  for (k = 0, len2 = EMOJI_CHARS.length; k < len2; k++) {
    ec = EMOJI_CHARS[k];
    ref1 = ec.short_names;
    for (l = 0, len3 = ref1.length; l < len3; l++) {
      keyword = ref1[l];
      EMOJICHAR_KEYWORD_MAP[keyword] = ec;
    }
  }

  EmojiData.all = function() {
    return EMOJI_CHARS;
  };

  EmojiData.all_doublebyte = function() {
    var len4, n, results;
    results = [];
    for (n = 0, len4 = EMOJI_CHARS.length; n < len4; n++) {
      ec = EMOJI_CHARS[n];
      if (ec.is_doublebyte()) {
        results.push(ec);
      }
    }
    return results;
  };

  EmojiData.all_with_variants = function() {
    var len4, n, results;
    results = [];
    for (n = 0, len4 = EMOJI_CHARS.length; n < len4; n++) {
      ec = EMOJI_CHARS[n];
      if (ec.has_variants()) {
        results.push(ec);
      }
    }
    return results;
  };

  EmojiData.chars = function(options) {
    var extra, norms;
    if (options == null) {
      options = {
        include_variants: false
      };
    }
    norms = (function() {
      var len4, n, results;
      results = [];
      for (n = 0, len4 = EMOJI_CHARS.length; n < len4; n++) {
        ec = EMOJI_CHARS[n];
        results.push(ec.render({
          variant_encoding: false
        }));
      }
      return results;
    })();
    extra = (function() {
      var len4, n, ref2, results;
      ref2 = this.all_with_variants();
      results = [];
      for (n = 0, len4 = ref2.length; n < len4; n++) {
        ec = ref2[n];
        results.push(ec.render({
          variant_encoding: true
        }));
      }
      return results;
    }).call(this);
    if (options.include_variants) {
      return norms.concat(extra);
    }
    return norms;
  };

  EmojiData.codepoints = function(options) {
    var extra, norms;
    if (options == null) {
      options = {
        include_variants: false
      };
    }
    norms = (function() {
      var len4, n, results;
      results = [];
      for (n = 0, len4 = EMOJI_CHARS.length; n < len4; n++) {
        ec = EMOJI_CHARS[n];
        results.push(ec.unified);
      }
      return results;
    })();
    extra = (function() {
      var len4, n, ref2, results;
      ref2 = this.all_with_variants();
      results = [];
      for (n = 0, len4 = ref2.length; n < len4; n++) {
        ec = ref2[n];
        results.push(ec.variant());
      }
      return results;
    }).call(this);
    if (options.include_variants) {
      return norms.concat(extra);
    }
    return norms;
  };

  EmojiData.char_to_unified = function(char) {
    var cp, cps, hexes;
    cps = punycode.ucs2.decode(char);
    hexes = (function() {
      var len4, n, results;
      results = [];
      for (n = 0, len4 = cps.length; n < len4; n++) {
        cp = cps[n];
        results.push(_str.rjust(cp.toString(16), 4, "0"));
      }
      return results;
    })();
    return hexes.join("-").toUpperCase();
  };

  EmojiData.unified_to_char = function(uid) {
    return EmojiChar._unified_to_char(uid);
  };

  EmojiData.find_by_name = function(name) {
    var len4, n, results, target;
    target = name.toUpperCase();
    results = [];
    for (n = 0, len4 = EMOJI_CHARS.length; n < len4; n++) {
      ec = EMOJI_CHARS[n];
      if (ec.name.indexOf(target) !== -1) {
        results.push(ec);
      }
    }
    return results;
  };

  EmojiData.find_by_short_name = function(short_name) {
    var len4, n, results, target;
    target = short_name.toLowerCase();
    results = [];
    for (n = 0, len4 = EMOJI_CHARS.length; n < len4; n++) {
      ec = EMOJI_CHARS[n];
      if (ec.short_names.some(function(sn) {
        return sn.indexOf(target) !== -1;
      })) {
        results.push(ec);
      }
    }
    return results;
  };

  EmojiData.from_short_name = function(short_name) {
    return EMOJICHAR_KEYWORD_MAP[short_name.toLowerCase()];
  };

  EmojiData.from_unified = function(uid) {
    return EMOJICHAR_UNIFIED_MAP[uid.toUpperCase()];
  };

  FBS_REGEXP = new RegExp("(?:" + (EmojiData.chars({
    include_variants: true
  }).join("|").replace('\u002A', '\\\u002A')) + ")", "g");

  EmojiData.scan = function(str) {
    var id, len4, m, matches, n, results;
    FBS_REGEXP.lastIndex = 0;
    matches = [];
    while ((m = FBS_REGEXP.exec(str))) {
      var charLength = m[0].split('').length;
      var data = {
        id: m[0],
        index: m.index,
        length: charLength 
      };
      matches.push(data);
    }
    results = [];
    for (n = 0, len4 = matches.length; n < len4; n++) {
      var char = matches[n];
      var data = this.from_unified(this.char_to_unified(char.id));
      char.data = data;
      delete char.id; 
      results.push(char);
    }
    return results;
  };

  return EmojiData;

})();

module.exports = EmojiData;

module.exports.EmojiChar = EmojiChar;
